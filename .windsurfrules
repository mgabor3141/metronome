# General Code Style & Formatting
- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.

# Naming Conventions
- Use PascalCase for classes and components.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names, except for components.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Functions & Logic
- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions.
- Write functional-style TypeScript where possible.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.
- Prefer `const` where possible.

# Styling & UI
- Use Tailwind CSS for styling.

# Svelte
- Use Svelte 5 with the runes syntax.
- Write idiomatic Svelte.
- Runes such as $state, $derived, etc. do not need to be imported. They are globally available.
- Svelte runes are used like this: `const count = $state(0); count++;`

# Tone.js
- Tone.Transport is deprecated.

# Package Management
- Use `bun` as the package manager.
